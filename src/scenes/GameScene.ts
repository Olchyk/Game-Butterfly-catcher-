import Phaser from "phaser";

export default class GameScene extends Phaser.Scene {
  private score: number = 0;
  private scoreText!: Phaser.GameObjects.Text;
  private timerText!: Phaser.GameObjects.Text;
  private timeLeft: number = 30;
  private difficulty: string = "medium";
  private backgroundKey: string = "backgroundMedium";

  private catcher!: Phaser.Physics.Arcade.Sprite; // ‚úÖ –î–æ–¥–∞—î–º–æ catcher
  private cursors!: Phaser.Types.Input.Keyboard.CursorKeys; // ‚úÖ –î–æ–¥–∞—î–º–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
  private platforms!: Phaser.Physics.Arcade.StaticGroup;
  private bats!: Phaser.Physics.Arcade.Group;

  constructor() {
    super({ key: "GameScene" }); // ‚úÖ –û–≥–æ–ª–æ—à—É—î–º–æ –∫–ª—é—á —Å—Ü–µ–Ω–∏
  }

  init(data: any) {
    this.bats = undefined as any;
    console.log("–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:", data); // ‚úÖ –î–æ–¥–∞–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

    if (!data || !data.difficulty) {
      console.error(
        "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ, –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º."
      );
      this.difficulty = "medium";
    } else {
      this.difficulty = data.difficulty;
    }

    if (this.difficulty === "easy") {
      this.timeLeft = 40;
    } else if (this.difficulty === "hard") {
      this.timeLeft = 20;
    } else {
      this.timeLeft = 30;
    }

    // üìå –û—Ç—Ä–∏–º—É—î–º–æ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑ registry
    this.difficulty = data.difficulty || "unknown";
    this.registry.set("difficulty", this.difficulty); // ‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ

    if (this.difficulty === "easy") {
      this.timeLeft = 40;
      this.backgroundKey = "backgroundEasy";
    } else if (this.difficulty === "hard") {
      this.timeLeft = 20;
      this.backgroundKey = "backgroundHard";
    } else {
      this.timeLeft = 30;
      this.backgroundKey = "backgroundMedium";
    }
  }

  preload() {
    console.log("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ —É GameScene...");
    console.log("üì• –ß–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π catcher?", this.textures.exists("catcher"));

    this.load.spritesheet("butterfly", "assets/items/butterfly.png", {
      frameWidth: 16,
      frameHeight: 16,
    });
    this.load.spritesheet("blueButterfly", "assets/items/butterfly-blue.png", {
      frameWidth: 65,
      frameHeight: 65,
    });
    this.load.image("catcher", "assets/items/catcher.png");
    this.load.image("platform", "assets/items/steelstrip.png");
    this.load.image("backgroundEasy", "assets/background/morning-back.jpeg");
    this.load.image("backgroundMedium", "assets/background/day-back.jpeg");
    this.load.image("backgroundHard", "assets/background/dark-back.jpeg");

    this.load.once("complete", () => {
      console.log("‚úÖ –í—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!");
    });

    this.load.spritesheet("bat", "assets/items/bat.png", {
      frameWidth: 32, // üîπ –í–∫–∞–∑—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –∫–∞–¥—Ä—É (–∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Å–ø—Ä–∞–π—Ç–∞)
      frameHeight: 32,
    });

    this.load.once("complete", () => {
      console.log("‚úÖ –í—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!");
    });

    console.log("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  }

  create() {
    console.log("üéÆ create() GameScene –∑–∞–ø—É—â–µ–Ω–æ!");

    if (!this.scene || !this.add) {
      console.error("‚ö†Ô∏è Scene context –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π!");
      return;
    }

    console.log(this.add); // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π this.add

    if (!this.add) {
      console.error("‚ö†Ô∏è this.add —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π!");
      return;
    }

    this.events.on("shutdown", () => {
      this.score = 0; // ‚ùó –û—á–∏—Å—Ç–∫–∞ –æ—á–æ–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ —Å—Ü–µ–Ω–∏
    });

    this.anims.create({
      key: "fly",
      frames: this.anims.generateFrameNumbers("butterfly", {
        start: 0,
        end: 3,
      }),
      frameRate: 10,
      repeat: -1,
    });

    this.anims.create({
      key: "flyBlue",
      frames: this.anims.generateFrameNumbers("blueButterfly", {
        start: 0,
        end: 3,
      }),
      frameRate: 10,
      repeat: -1,
    });

    const background = this.add.image(
      this.scale.width / 2,
      this.scale.height / 2,
      this.backgroundKey
    );
    background.setDisplaySize(this.scale.width, this.scale.height);
    background.setOrigin(0.5);

    // ‚úÖ –î–æ–¥–∞—î–º–æ —Ä–µ–∞–∫—Ü—ñ—é –Ω–∞ –∑–º—ñ–Ω—É —Ä–æ–∑–º—ñ—Ä—É
    this.scale.on("resize", (gameSize: any) => {
      background.setDisplaySize(gameSize.width, gameSize.height);
      this.scoreText.setPosition(10, 10);
      this.timerText.setPosition(gameSize.width - 100, 10);
    });

    this.scoreText = this.add.text(10, 10, "–û—á–∫–∏: 0", {
      fontSize: "20px",
      color: "#ffffff",
      fontFamily: "'Tiny5', serif",
    });
    this.timerText = this.add.text(
      this.scale.width - 150,
      10,
      `–ß–∞—Å: ${this.timeLeft}`,
      { fontSize: "20px", color: "#ffffff", fontFamily: "'Tiny5', serif" }
    );

    // ‚úÖ –î–æ–¥–∞—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

    console.log("üõ†Ô∏è this.physics –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:", this.physics);
    if (!this.physics) {
      console.error("‚ùå this.physics –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π!");
      return;
    }

    this.catcher = this.physics.add.sprite(400, 500, "catcher");
    this.catcher.setCollideWorldBounds(true);
    this.catcher.setBounce(0.2);
    this.catcher.setGravityY(500);

    // ‚úÖ –ì–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ `cursors`
    const inputKeys = this.input.keyboard?.createCursorKeys();
    if (inputKeys) {
      this.cursors = inputKeys;
    } else {
      console.warn("‚ö†Ô∏è –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ.");
    }

    this.butterflies = this.physics.add.group();

    this.spawnButterflies(5); // –ü–æ—á–∞—Ç–∫–æ–≤—ñ 5 –º–µ—Ç–µ–ª–∏–∫—ñ–≤

    this.time.addEvent({
      delay: 3000,
      callback: () => this.spawnButterflies(1),
      callbackScope: this,
      loop: true,
    });

    // ‚úÖ –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä
    this.time.addEvent({
      delay: 1000,
      callback: this.updateTimer,
      callbackScope: this,
      loop: true,
    });

    this.platforms = this.physics.add.staticGroup(); // üõ† –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
    // –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ –ø–µ—Ä–µ—Ç–∏–Ω–∞—î—Ç—å—Å—è –Ω–æ–≤–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∑ —ñ—Å–Ω—É—é—á–∏–º–∏
    const isOverlapping = (x: number, y: number, minDistance: number = 60) => {
      return this.platforms.getChildren().some((platform) => {
        const plat = platform as Phaser.Physics.Arcade.Sprite;
        const distance = Phaser.Math.Distance.Between(x, y, plat.x, plat.y);
        return distance < minDistance;
      });
    };

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º –±–µ–∑ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è
    const generatePlatforms = (
      count: number,
      minX: number,
      maxX: number,
      minY: number,
      maxY: number,
      minScale: number,
      maxScale: number
    ) => {
      for (let i = 0; i < count; i++) {
        let x, y;
        let attempts = 10; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –∑–Ω–∞–π—Ç–∏ –≤—ñ–ª—å–Ω–µ –º—ñ—Å—Ü–µ

        do {
          x = Phaser.Math.Between(minX, maxX);
          y = Phaser.Math.Between(minY, maxY);
          attempts--;
        } while (isOverlapping(x, y, 70) && attempts > 0); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è

        if (attempts > 0) {
          const scaleX = Phaser.Math.FloatBetween(minScale, maxScale);
          this.platforms
            .create(x, y, "platform")
            .setScale(scaleX, 0.5)
            .refreshBody();
        }
      }
    };

    generatePlatforms(3, 100, this.scale.width - 100, 100, 250, 0.8, 1.2); // üîπ –í–µ—Ä—Ö–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å (–º–µ–Ω—à—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏)
    generatePlatforms(3, 100, this.scale.width - 100, 270, 400, 1.0, 1.4); // üîπ –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å (–≤–∏—â–µ, –º–µ–Ω—à–µ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è)
    generatePlatforms(
      3,
      100,
      this.scale.width - 100,
      this.scale.height - 130,
      this.scale.height - 60,
      1.2,
      1.5
    ); // üîπ –ù–∏–∂–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å (–∑—Ä—É—á–Ω—ñ –¥–ª—è —Å—Ç—Ä–∏–±–∫—ñ–≤)

    // ‚úÖ –î–æ–¥–∞—î–º–æ —Ñ—ñ–∑–∏–∫—É, —â–æ–± –ø–µ—Ä—Å–æ–Ω–∞–∂ –º—ñ–≥ —Å—Ç–æ—è—Ç–∏ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö
    this.physics.add.collider(this.catcher, this.platforms);

    //–¥–æ–¥–∞—î–º–æ —Ç—Ä–∞–º–ø–ª—ñ–Ω–∏
    this.time.addEvent({
      delay: Phaser.Math.Between(7000, 10000), // –í–∏–ø–∞–¥–∫–æ–≤–æ —Ä–∞–∑ –Ω–∞ 7-10 —Å–µ–∫—É–Ω–¥
      callback: this.spawnTemporaryTrampolines,
      callbackScope: this,
      loop: true,
    });

    if (!this.anims.exists("flyBat")) {
      this.anims.create({
        key: "flyBat",
        frames: this.anims.generateFrameNumbers("bat", { start: 0, end: 5 }),
        frameRate: 10,
        repeat: -1,
      });
    }

    // üéûÔ∏è –ê–Ω—ñ–º–∞—Ü—ñ—è –ª–µ—Ç—é—á–æ—ó –º–∏—à—ñ
    this.anims.create({
      key: "flyBat",
      frames: this.anims.generateFrameNumbers("bat", { start: 0, end: 5 }),
      frameRate: 10,
      repeat: -1,
    });

    // ü¶á –î–æ–¥–∞—î–º–æ –º–∏—à–µ–π —Ç—ñ–ª—å–∫–∏ —É —Å–∫–ª–∞–¥–Ω–æ–º—É —Ä—ñ–≤–Ω—ñ
    if (this.difficulty === "hard") {
      if (!this.bats) {
        this.bats = this.physics.add.group(); // üõ† –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É–ø—É
      } else {
        this.bats.clear(true, true); // ‚úÖ –í–∏–¥–∞–ª—è—î–º–æ –º–∏—à–µ–π –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ—é –≥—Ä–æ—é
      }

      this.spawnBats(2); // –°–ø–∞–≤–Ω–∏–º–æ 2 –º–∏—à–µ–π

      this.time.addEvent({
        delay: 5000,
        callback: () => this.spawnBats(1),
        callbackScope: this,
        loop: true,
      });
    }
  }

  // ü¶á –°–ø–∞–≤–Ω –º–∏—à–µ–π
  spawnBats(count: number) {
    if (!this.bats) {
      return; // ‚ùå –£–Ω–∏–∫–∞—î–º–æ –ø–æ–º–∏–ª–∫–∏, —è–∫—â–æ bats —â–µ –Ω–µ–º–∞—î
    }

    for (let i = 0; i < count; i++) {
      const x = Phaser.Math.Between(100, this.scale.width - 100);
      const y = Phaser.Math.Between(50, 300);

      const bat = this.physics.add.sprite(x, y, "bat").play("flyBat");
      bat.setVelocity(
        Phaser.Math.Between(-100, 100),
        Phaser.Math.Between(-50, 50)
      );
      bat.setCollideWorldBounds(true);
      bat.setBounce(1);

      this.bats.add(bat); // ‚úÖ –î–æ–¥–∞—î–º–æ –≤ –≥—Ä—É–ø—É

      this.physics.add.overlap(this.catcher, bat, () => {
        console.log("üíÄ –ì—Ä–∞–≤—Ü—è –∑–ª–æ–≤–∏–ª–∞ –º–∏—à–∞!");
        this.scene.start("GameOverScene", { score: this.score });
      });
    }
  }

  spawnTemporaryTrampolines() {
    const platformsArray =
      this.platforms.getChildren() as Phaser.Physics.Arcade.Sprite[]; // üéØ –î–æ–¥–∞—î–º–æ —Ç–∏–ø—ñ–∑–∞—Ü—ñ—é
    if (platformsArray.length === 0) return; // –Ø–∫—â–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º –Ω–µ–º–∞—î, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ

    const trampolineCount = Phaser.Math.Between(1, 2); // –í–∏–ø–∞–¥–∫–æ–≤–æ 1-2 —Ç—Ä–∞–º–ø–ª—ñ–Ω–∏

    for (let i = 0; i < trampolineCount; i++) {
      const randomPlatform = Phaser.Math.RND.pick(platformsArray); // –í–∏–ø–∞–¥–∫–æ–≤–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞

      if (!randomPlatform.body) continue; // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ñ—ñ–∑–∏–∫–∞ —É –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏

      const platformX = randomPlatform.x;
      const platformY = randomPlatform.y - 20; // –¢—Ä–∞–º–ø–ª—ñ–Ω —Ç—Ä–æ—Ö–∏ –≤–∏—â–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏

      const trampoline = this.physics.add
        .sprite(platformX, platformY, "platform")
        .setScale(0.5, 0.2)
        .refreshBody();

      // –î–æ–¥–∞—î–º–æ –µ—Ñ–µ–∫—Ç –ø—ñ–¥–≤–∏—â–µ–Ω–æ–≥–æ —Å—Ç—Ä–∏–±–∫–∞
      this.physics.add.overlap(this.catcher, trampoline, () => {
        this.catcher.setVelocityY(-450); // üîπ –°–∏–ª—å–Ω—ñ—à–∏–π —Å—Ç—Ä–∏–±–æ–∫
      });

      // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∞–º–ø–ª—ñ–Ω—É —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
      this.time.delayedCall(3000, () => {
        trampoline.destroy();
      });
    }
  }

  private maxButterflies = 10; // ü¶ã –õ—ñ–º—ñ—Ç –º–µ—Ç–µ–ª–∏–∫—ñ–≤ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
  private butterflies!: Phaser.Physics.Arcade.Group; // –ì—Ä—É–ø–∞ –º–µ—Ç–µ–ª–∏–∫—ñ–≤

  spawnButterflies(count: number) {
    if (!this.butterflies) {
      this.butterflies = this.physics.add.group(); // –°—Ç–≤–æ—Ä—é—î–º–æ –≥—Ä—É–ø—É –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤–∏–∫–ª–∏–∫—É
    }

    // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤–∏—Ö –º–µ—Ç–µ–ª–∏–∫—ñ–≤, —è–∫—â–æ —ó—Ö –±—ñ–ª—å—à–µ –ª—ñ–º—ñ—Ç—É
    while (this.butterflies.getChildren().length >= this.maxButterflies) {
      this.butterflies.getChildren()[0].destroy();
    }

    for (let i = 0; i < count; i++) {
      if (this.butterflies.getChildren().length >= this.maxButterflies) {
        break;
      }

      const x = Phaser.Math.Between(50, 750);
      const y = Phaser.Math.Between(200, 500);
      const isBlue = Phaser.Math.Between(1, 10) === 1; // 10% —à–∞–Ω—Å –Ω–∞ —Å–∏–Ω—å–æ–≥–æ –º–µ—Ç–µ–ª–∏–∫–∞

      const butterfly = this.physics.add.sprite(
        x,
        y,
        isBlue ? "blueButterfly" : "butterfly"
      );
      butterfly.setScale(2);
      butterfly.play(isBlue ? "flyBlue" : "fly");

      butterfly.setGravityY(0);
      butterfly.setCollideWorldBounds(true);
      butterfly.setData("isBlue", isBlue); // üîπ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ, —è–∫–∏–π —Ü–µ –º–µ—Ç–µ–ª–∏–∫
      this.butterflies.add(butterfly);

      // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ–ª—å–æ—Ç—É
      this.tweens.add({
        targets: butterfly,
        x: x + Phaser.Math.Between(-100, 100), // –ö–æ–ª–∏–≤–∞—î—Ç—å—Å—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—ñ
        y: y - Phaser.Math.Between(20, 100), // –õ—ñ—Ç–∞—î –±–ª–∏–∂—á–µ –¥–æ –∑–µ–º–ª—ñ
        duration: Phaser.Math.Between(2000, 4000),
        yoyo: true,
        repeat: -1,
        ease: "Sine.easeInOut",
      });

      // –í–∑–∞—î–º–æ–¥—ñ—è –∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º
      this.physics.add.overlap(
        this.catcher, // –ü–µ—Ä—Å–æ–Ω–∞–∂
        this.butterflies, // –ì—Ä—É–ø–∞ –º–µ—Ç–µ–ª–∏–∫—ñ–≤
        (catcher, caughtButterfly) => {
          if (caughtButterfly instanceof Phaser.Physics.Arcade.Sprite) {
            this.catchButterfly(caughtButterfly);
          }
        },
        undefined,
        this
      );
    }
  }

  catchButterfly(butterfly: Phaser.Physics.Arcade.Sprite) {
    const isBlue = butterfly.getData("isBlue"); // –û—Ç—Ä–∏–º—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
    butterfly.destroy();
    this.score += isBlue ? 50 : 10; // üéØ 50 –æ—á–æ–∫ –∑–∞ —Å–∏–Ω—å–æ–≥–æ, 10 –∑–∞ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ
    this.scoreText.setText("–û—á–∫–∏: " + this.score);
    this.spawnButterflies(1);
  }

  updateTimer() {
    this.timeLeft--;
    this.timerText.setText(`–ß–∞—Å: ${this.timeLeft}`);

    if (this.timeLeft <= 0) {
      this.scene.start("GameOverScene", { score: this.score });
    }
  }

  update() {
    if (!this.cursors) {
      return; // ‚úÖ –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–µ—Ä—É–≤–∞–Ω–Ω—è, –Ω–µ –≤–∏–∫–æ–Ω—É—î–º–æ –∫–æ–¥
    }

    if (this.cursors.left?.isDown) {
      this.catcher.setVelocityX(-200); // –†—É—Ö –≤–ª—ñ–≤–æ
    } else if (this.cursors.right?.isDown) {
      this.catcher.setVelocityX(200); // –†—É—Ö –≤–ø—Ä–∞–≤–æ
    } else {
      this.catcher.setVelocityX(0); // –ó—É–ø–∏–Ω–∫–∞
    }

    if (this.cursors.up?.isDown && this.catcher.body?.blocked.down) {
      this.catcher.setVelocityY(-400); // –°—Ç—Ä–∏–±–æ–∫ –≤–≥–æ—Ä—É
    }
  }
}
